> apply(sub2, 2, max)
Ozone 
  115 
> add2 <- function(x, y){
+   x + y
+ }
> add2(2,3)
[1] 5
> gt <- function(x){
+   subset(x, x > 10)
+ }
> gt(1:20)
 [1] 11 12 13 14 15 16 17 18 19 20
> gt <- function(x, y){
+   subset(x, x > y)
+ }
> gt(1:20, 5)
 [1]  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
> gt(1:20, 21)
integer(0)
> mycol <- function(x){
+   nc <- ncol(x)
+   means <- numeric(nc)
+   for(i in 1:nc){
+     means[i] <- means(x[, i])
+   }
+   means
+ }
> mycol(10)
Error in numeric(nc) : invalid 'length' argument
> mycol(airquality)
Error in means(x[, i]) : could not find function "means"
> mycol <- function(x){
+   nc <- ncol(x)
+   means <- numeric(nc)
+   for(i in 1:nc){
+     means[i] <- mean(x[, i])
+   }
+   means
+ }
> mycol(airquality)
[1]        NA        NA  9.957516 77.882353  6.993464 15.803922
> mycol <- function(x, removeNA = TRUE){
+   nc <- ncol(x)
+   means <- numeric(nc)
+   for(i in 1:nc){
+     means[i] <- mean(x[, i])
+   }
+   means
+ }
> mycol(airquality)
[1]        NA        NA  9.957516 77.882353  6.993464 15.803922
> mycol <- function(x, removeNA = TRUE){
+   nc <- ncol(x)
+   means <- numeric(nc)
+   for(i in 1:nc){
+     means[i] <- mean(x[, i], na.rm = removeNA)
+   }
+   means
+ }
> mycol(airquality)
[1]  42.129310 185.931507   9.957516  77.882353   6.993464  15.803922
> f <- function(x) {
+   g <- function(y) {
+     y + z
+   }
+   z <- 4
+   x + g(x)
+ }
> debugSource('C:/Users/Mauro/datasciencecoursera/Week2.R')
Called from: eval(expr, p)
Browse[1]> n
debug at C:/Users/Mauro/datasciencecoursera/Week2.R#18: f <- function(x) {
    g <- function(y) {
        y + z
    }
    z <- 4
    x + g(x)
}
Browse[2]> h
Error: object 'h' not found
Browse[2]> f

> f(3)
[1] 10
> z <- 10
> f(3)
Called from: eval(expr, p)
Browse[1]> n
debug at C:/Users/Mauro/datasciencecoursera/Week2.R#19: g <- function(y) {
    y + z
}
Browse[2]> 
debug at C:/Users/Mauro/datasciencecoursera/Week2.R#22: z <- 4
Browse[2]> c
[1] 10
> f(4)
Called from: eval(expr, p)
Browse[1]> n
debug at C:/Users/Mauro/datasciencecoursera/Week2.R#19: g <- function(y) {
    y + z
}
Browse[2]> n
debug at C:/Users/Mauro/datasciencecoursera/Week2.R#22: z <- 4
Browse[2]> n
debug at C:/Users/Mauro/datasciencecoursera/Week2.R#23: x + g(x)
Browse[2]> n
[1] 12
> f(4)
Called from: eval(expr, p)
Browse[1]> n
debug at C:/Users/Mauro/datasciencecoursera/Week2.R#19: g <- function(y) {
    y + z
}
Browse[2]> n
debug at C:/Users/Mauro/datasciencecoursera/Week2.R#22: z <- 4
Browse[2]> n
debug at C:/Users/Mauro/datasciencecoursera/Week2.R#23: x + g(x)
Browse[2]> n
[1] 12
> View(a)
> f(5)
Called from: eval(expr, p)
Browse[1]> n
debug at C:/Users/Mauro/datasciencecoursera/Week2.R#19: g <- function(y) {
    y + z
}
Browse[2]> n
debug at C:/Users/Mauro/datasciencecoursera/Week2.R#22: z <- 4
Browse[2]> n
debug at C:/Users/Mauro/datasciencecoursera/Week2.R#23: x + g(x)
Browse[2]> n
[1] 14
> library(swirl)

| Hi! I see that you have some variables saved in your workspace. To keep things running
| smoothly, I recommend you clean up before starting swirl.

| Type ls() to see a list of the variables in your workspace. Then, type rm(list=ls()) to
| clear your workspace.

| Type swirl() when you are ready to begin.

> swrirl()
Error in swrirl() : could not find function "swrirl"
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name as you
| did then. If you are new, call yourself something unique.

What shall I call you? mauro

| Would you like to continue with one of these lessons?

1: R Programming Logic
2: No. Let me start something new.

Selection: 1



| You can use the `&` operator to evaluate AND across a vector. The `&&` version of AND
| only evaluates the first member of a vector. Let's test both for practice. Type the
| expression TRUE & c(TRUE, FALSE, FALSE).

> TRUE & c(TRUE, FALSE, FALSE)
[1]  TRUE FALSE FALSE

| Perseverance, that's the answer.

  |================================                                                |  40%
| What happens in this case is that the left operand `TRUE` is recycled across every
| element in the vector of the right operand. This is the equivalent statement as c(TRUE,
| TRUE, TRUE) & c(TRUE, FALSE, FALSE).

...

  |==================================                                              |  42%
| Now we'll type the same expression except we'll use the `&&` operator. Type the
| expression TRUE && c(TRUE, FALSE, FALSE).

> TRUE & c(TRUE, FALSE, FALSE)
[1]  TRUE FALSE FALSE

| That's not the answer I was looking for, but try again. Or, type info() for more
| options.

| As you'll see, the && version of AND works differently. Type: TRUE && c(TRUE, FALSE,
| FALSE)

> TRUE && c(TRUE, FALSE, FALSE)
[1] TRUE

| Keep working like that and you'll get there!

  |===================================                                             |  44%
| In this case, the left operand is only evaluated with the first member of the right
| operand (the vector). The rest of the elements in the vector aren't evaluated at all in
| this expression.

...

  |=====================================                                           |  46%
| The OR operator follows a similar set of rules. The `|` version of OR evaluates OR
| across an entire vector, while the `||` version of OR only evaluates the first member
| of a vector.

...

  |======================================                                          |  48%
| An expression using the OR operator will evaluate to TRUE if the left operand or the
| right operand is TRUE. If both are TRUE, the expression will evaluate to TRUE, however
| if neither are TRUE, then the expression will be FALSE.

...

  |========================================                                        |  50%
| Let's test out the vectorized version of the OR operator. Type the expression TRUE |
| c(TRUE, FALSE, FALSE).

> TRUE | c(TRUE, FALSE, FALSE)
[1] TRUE TRUE TRUE

| All that practice is paying off!

  |==========================================                                      |  52%
| Now let's try out the non-vectorized version of the OR operator. Type the expression
| TRUE || c(TRUE, FALSE, FALSE).

> TRUE || c(TRUE, FALSE, FALSE)
[1] TRUE

| Excellent work!

  |===========================================                                     |  54%
| Logical operators can be chained together just like arithmetic operators. The
| expressions: `6 != 10 && FALSE && 1 >= 2` or `TRUE || 5 < 9.3 || FALSE` are perfectly
| normal to see.

...

  |=============================================                                   |  56%
| As you may recall, arithmetic has an order of operations and so do logical expressions.
| All AND operators are evaluated before OR operators. Let's look at an example of an
| ambiguous case. Type: 5 > 8 || 6 != 8 && 4 > 3.9

> 5 > 8 || 6 != 8 && 4 > 3.9
[1] TRUE

| You are quite good my friend!

  |==============================================                                  |  58%
| Let's walk through the order of operations in the above case. First the left and right
| operands of the AND operator are evaluated. 6 is not equal 8, 4 is greater than 3.9,
| therefore both operands are TRUE so the resulting expression `TRUE && TRUE` evaluates
| to TRUE. Then the left operand of the OR operator is evaluated: 5 is not greater than 8
| so the entire expression is reduced to FALSE || TRUE. Since the right operand of this
| expression is TRUE the entire expression evaluates to TRUE.

...

  |================================================                                |  60%
| Which one of the following expressions evaluates to TRUE?

1: 99.99 > 100 || 45 < 7.3 || 4 != 4.0
2: TRUE && 62 < 62 && 44 >= 44
3: TRUE && FALSE || 9 >= 4 && 3 < 6
4: FALSE || TRUE && FALSE

Selection: 3

| Keep up the great work!

  |=================================================                               |  62%
| Which one of the following expressions evaluates to FALSE?

1: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
2: FALSE || TRUE && 6 != 4 || 9 > 4
3: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
4: 6 >= -9 && !(6 > 7) && !(!TRUE)

Selection: 3

| Excellent work!

  |===================================================                             |  63%
| Now that you're familiar with R's logical operators you can take advantage of a few
| functions that R provides for dealing with logical expressions.

...

  |====================================================                            |  65%
| The function isTRUE() takes one argument. If that argument evaluates to TRUE, the
| function will return TRUE. Otherwise, the function will return FALSE. Try using this
| function by typing: isTRUE(6 > 4)

> isTRUE(6 >4)
[1] TRUE

| You are amazing!

  |======================================================                          |  67%
| Which of the following evaluates to TRUE?

1: !isTRUE(8 != 5)
2: isTRUE(!TRUE)
3: isTRUE(NA)
4: isTRUE(3)
5: !isTRUE(4 < 3)

Selection: 5

| All that hard work is paying off!

  |=======================================================                         |  69%
| The function identical() will return TRUE if the two R objects passed to it as
| arguments are identical. Try out the identical() function by typing: identical('twins',
| 'twins')

> identical("twins", "twins")
[1] TRUE

| All that hard work is paying off!

  |=========================================================                       |  71%
| Which of the following evaluates to TRUE?

1: identical(5 > 4, 3 < 3.1)
2: !identical(7, 7)
3: identical('hello', 'Hello')
4: identical(4, 3.1)

Selection: 1

| You got it right!

  |==========================================================                      |  73%
| You should also be aware of the xor() function, which takes two arguments. The xor()
| function stands for exclusive OR. If one argument evaluates to TRUE and one argument
| evaluates to FALSE, then this function will return TRUE, otherwise it will return
| FALSE. Try out the xor() function by typing: xor(5 == 6, !FALSE)

> xor(5 == 6, !FALSE)
[1] TRUE

| You are quite good my friend!

  |============================================================                    |  75%
| 5 == 6 evaluates to FALSE, !FALSE evaluates to TRUE, so xor(FALSE, TRUE) evaluates to
| TRUE. On the other hand if the first argument was changed to 5 == 5 and the second
| argument was unchanged then both arguments would have been TRUE, so xor(TRUE, TRUE)
| would have evaluated to FALSE.

...

  |==============================================================                  |  77%
| Which of the following evaluates to FALSE?

1: xor(!isTRUE(TRUE), 6 > -1)
2: xor(identical(xor, 'xor'), 7 == 7.0)
3: xor(4 >= 9, 8 != 8.0)
4: xor(!!TRUE, !!FALSE)

Selection: 2

| Not quite! Try again.

| For xor() to evaluate to TRUE, one argument must be TRUE and one must be FALSE.

1: xor(!isTRUE(TRUE), 6 > -1)
2: xor(4 >= 9, 8 != 8.0)
3: xor(identical(xor, 'xor'), 7 == 7.0)
4: xor(!!TRUE, !!FALSE)

Selection: 4

| That's not the answer I was looking for, but try again.

| For xor() to evaluate to TRUE, one argument must be TRUE and one must be FALSE.

1: xor(!!TRUE, !!FALSE)
2: xor(4 >= 9, 8 != 8.0)
3: xor(!isTRUE(TRUE), 6 > -1)
4: xor(identical(xor, 'xor'), 7 == 7.0)

Selection: 2

| Your dedication is inspiring!

  |===============================================================                 |  79%
| For the next few questions, we're going to need to create a vector of integers called
| ints. Create this vector by typing: ints <- sample(10)

> ints <- sample(10)

| Your dedication is inspiring!

  |=================================================================               |  81%
| Now simply display the contents of ints.

> ints
 [1]  1  6  4 10  7  9  8  5  3  2

| Excellent work!

  |==================================================================              |  83%
| The vector `ints` is a random sampling of integers from 1 to 10 without replacement.
| Let's say we wanted to ask some logical questions about contents of ints. If we type
| ints > 5, we will get a logical vector corresponding to whether each element of ints is
| greater than 5. Try typing: ints > 5

> ints > 5
 [1] FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE

| All that hard work is paying off!

  |====================================================================            |  85%
| We can use the resulting logical vector to ask other questions about ints. The which()
| function takes a logical vector as an argument and returns the indices of the vector
| that are TRUE. For example which(c(TRUE, FALSE, TRUE)) would return the vector c(1, 3).

...

  |=====================================================================           |  87%
| Use the which() function to find the indices of ints that are greater than 7.

> ?which
> which(ints > 7)
[1] 4 6 7

| Keep working like that and you'll get there!

  |=======================================================================         |  88%
| Which of the following commands would produce the indices of the elements in ints that
| are less than or equal to 2?

1: which(ints < 2)
2: which(ints <= 2)
3: ints < 2
4: ints <= 2

Selection: 2

| You are doing so well!

  |========================================================================        |  90%
| Like the which() function, the functions any() and all() take logical vectors as their
| argument. The any() function will return TRUE if one or more of the elements in the
| logical vector is TRUE. The all() function will return TRUE if every element in the
| logical vector is TRUE.

...

  |==========================================================================      |  92%
| Use the any() function to see if any of the elements of ints are less than zero.

> any(ints < 0)
[1] FALSE

| You are quite good my friend!

  |===========================================================================     |  94%
| Use the all() function to see if all of the elements of ints are greater than zero.

> all(ints > 0)
[1] TRUE

| You're the best!

  |=============================================================================   |  96%
| Which of the following evaluates to TRUE?

1: all(c(TRUE, FALSE, TRUE))
2: all(ints == 10)
3: any(ints == 10)
4: any(ints == 2.5)

Selection: 3

| You are really on a roll!

  |==============================================================================  |  98%
| That's all for this introduction to logic in R. If you really want to see what you can
| do with logic, check out the control flow lesson!

...

  |================================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 1
What is your email address? mauropaganin@gmail.com
What is your assignment token? R1AZ3irNv3kijICV
Grade submission succeeded!

| You're the best!

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers    
 4: Vectors                    5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                      9: Functions               
10: lapply and sapply         11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 9

  |                                                                                |   0%

| Functions are one of the fundamental building blocks of the R language. They are small
| pieces of reusable code that can be treated like any other R object.

...

  |==                                                                              |   2%
| If you've worked through any other part of this course, you've probably used some
| functions already. Functions are usually characterized by the name of the function
| followed by parentheses.

...

  |===                                                                             |   4%
| Let's try using a few basic functions just for fun. The Sys.Date() function returns a
| string representing today's date. Type Sys.Date() below and see what happens.

> Sys.Date()
[1] "2019-08-02"

| You nailed it! Good job!

  |=====                                                                           |   6%
| Most functions in R return a value. Functions like Sys.Date() return a value based on
| your computer's environment, while other functions manipulate input data in order to
| compute a return value.

...

  |=======                                                                         |   8%
| The mean() function takes a vector of numbers as input, and returns the average of all
| of the numbers in the input vector. Inputs to functions are often called arguments.
| Providing arguments to a function is also sometimes called passing arguments to that
| function. Arguments you want to pass to a function go inside the function's
| parentheses. Try passing the argument c(2, 4, 5) to the mean() function.

> mean(c(2,4,5))
[1] 3.666667

| Perseverance, that's the answer.

  |========                                                                        |  10%
| Functions usually take arguments which are variables that the function operates on. For
| example, the mean() function takes a vector as an argument, like in the case of
| mean(c(2,6,8)). The mean() function then adds up all of the numbers in the vector and
| divides that sum by the length of the vector.

...

  |==========                                                                      |  12%
| In the following question you will be asked to modify a script that will appear as soon
| as you move on from this question. When you have finished modifying the script, save
| your changes to the script and type submit() and the script will be evaluated. There
| will be some comments in the script that opens up, so be sure to read them!

...

  |===========                                                                     |  14%
| The last R expression to be evaluated in a function will become the return value of
| that function. We want this function to take one argument, x, and return x without
| modifying it. Delete the pound sign so that x is returned without any modification.
| Make sure to save your script before you type submit().

> boring_function <- function(x) {
+   x
+ }
> boring_function(4)
[1] 4
> submit()

| Sourcing your script...


| Keep working like that and you'll get there!

  |=============                                                                   |  16%
| Now that you've created your first function let's test it! Type: boring_function('My
| first function!'). If your function works, it should just return the string: 'My first
| function!'

> boring_function("My first function")
[1] "My first function"

| That's not exactly what I'm looking for. Try again. Or, type info() for more options.

| Test boring_function by typing: boring_function('My first function!')

> boring_function("My first function!")
[1] "My first function!"

| Your dedication is inspiring!

  |===============                                                                 |  18%
| Congratulations on writing your first function. By writing functions, you can gain
| serious insight into how R works. As John Chambers, the creator of R once said:
| 
| To understand computations in R, two slogans are helpful: 1. Everything that exists is
| an object. 2. Everything that happens is a function call.

...

  |================                                                                |  20%
| If you want to see the source code for any function, just type the function name
| without any arguments or parentheses. Let's try this out with the function you just
| created. Type: boring_function to view its source code.

> boring_function()
Error in boring_function() : argument "x" is missing, with no default
> boring_function
function(x) {
  x
}
<bytecode: 0x000000715939b710>

| You nailed it! Good job!

  |==================                                                              |  22%
| Time to make a more useful function! We're going to replicate the functionality of the
| mean() function by creating a function called: my_mean(). Remember that to calculate
| the average of all of the numbers in a vector you find the sum of all the numbers in
| the vector, and then divide that sum by the number of numbers in the vector.

...

  |====================                                                            |  24%
| Make sure to save your script before you type submit().

> my_mean <- function(my_vector) {
+   # Write your code here!
+   # Remember: the last expression evaluated will be returned! 
+   sum <- sum(my_vector)
+   len <- length(my_vector)
+   mymean <- sum / len
+   
+ }
> my_mean(1:10)
> my_mean()
Error in my_mean() : argument "my_vector" is missing, with no default
> my_mean <- function(my_vector) {
+   # Write your code here!
+   # Remember: the last expression evaluated will be returned! 
+   sum <- sum(my_vector)
+   len <- length(my_vector)
+   mymean <- sum / len
+   mymean
+ }
> my_mean(1:10)
[1] 5.5
> submit()

| Sourcing your script...


| Nice work!

  |=====================                                                           |  27%
| Now test out your my_mean() function by finding the mean of the vector c(4, 5, 10).

> my_mean(c(4,5,10))
[1] 6.333333

| That's a job well done!

  |=======================                                                         |  29%
| Next, let's try writing a function with default arguments. You can set default values
| for a function's arguments, and this can be useful if you think someone who uses your
| function will set a certain argument to the same value most of the time.

...

  |========================                                                        |  31%
| Make sure to save your script before you type submit().

> remainder <- function(num, divisor) {
+   rem <- num %% divisor
+   rem
+ }
> remainder(10,3)
[1] 1
> remainder <- function(num, divisor) {
+   rem <- num %% divisor
+   rem
+ }
> remainder(10,3)
[1] 1
> submit()

| Sourcing your script...


| Keep trying!

| Remember to set the appropriate default values!

> remainder <- function(num = 11, divisor = 3) {
+   rem <- num %% divisor
+   rem
+ }
> remainder()
[1] 2
> submit()

| Sourcing your script...


| Almost! Try again.

| Remember to set the appropriate default values!

> remainder <- function(num = 7, divisor = 4) {
+   rem <- num %% divisor
+   rem
+ }
> submit()

| Sourcing your script...


| Perseverance, that's the answer.

  |==========================                                                      |  33%
| Let's do some testing of the remainder function. Run remainder(5) and see what happens.

> submit(5)
Error in submit(5) : unused argument (5)
> 
> remainder(5)
[1] 1

| You are doing so well!

  |============================                                                    |  35%
| Let's take a moment to examine what just happened. You provided one argument to the
| function, and R matched that argument to 'num' since 'num' is the first argument. The
| default value for 'divisor' is 2, so the function used the default value you provided.

...

  |=============================                                                   |  37%
| Now let's test the remainder function by providing two arguments. Type: remainder(11,
| 5) and let's see what happens.

> remainder(11,5)
[1] 1

| You got it right!

  |===============================                                                 |  39%
| Once again, the arguments have been matched appropriately.

...

  |=================================                                               |  41%
| You can also explicitly specify arguments in a function. When you explicitly designate
| argument values by name, the ordering of the arguments becomes unimportant. You can try
| this out by typing: remainder(divisor = 11, num = 5).

> remainder(divisor = 11, num = 5)
[1] 5

| You got it right!

  |==================================                                              |  43%
| As you can see, there is a significant difference between remainder(11, 5) and
| remainder(divisor = 11, num = 5)!

...

  |====================================                                            |  45%
| R can also partially match arguments. Try typing remainder(4, div = 2) to see this
| feature in action.

> remainder(4, div = 2)
[1] 0

| You are amazing!

  |======================================                                          |  47%
| A word of warning: in general you want to make your code as easy to understand as
| possible. Switching around the orders of arguments by specifying their names or only
| using partial argument names can be confusing, so use these features with caution!

...

  |=======================================                                         |  49%
| With all of this talk about arguments, you may be wondering if there is a way you can
| see a function's arguments (besides looking at the documentation). Thankfully, you can
| use the args() function! Type: args(remainder) to examine the arguments for the
| remainder function.

> args(remainder)
function (num = 7, divisor = 4) 
NULL

| Your dedication is inspiring!

  |=========================================                                       |  51%
| You may not realize it but I just tricked you into doing something pretty interesting!
| args() is a function, remainder() is a function, yet remainder was an argument for
| args(). Yes it's true: you can pass functions as arguments! This is a very powerful
| concept. Let's write a script to see how it works.

...

  |==========================================                                      |  53%
| Make sure to save your script before you type submit().

> evaluate <- function(func, dat){
+   # Write your code here!
+   # Remember: the last expression evaluated will be returned! 
+   if (func == sum() && dat == c(2,4,6)){
+     ev = sum(dat)
+   }
+   ev
+ }
> evaluate <- function(func, dat){
+   # Write your code here!
+   # Remember: the last expression evaluated will be returned! 
+   if (func == "sum"){
+     ev = sum(dat)
+   }
+   if (func == "median"){
+     ev = median(dat)
+   }
+ }
> evaluate(sum, c(2,4,6))
Error in func == "sum" : 
  comparison (1) is possible only for atomic and list types
> evaluate <- function(func, dat){
+   # Write your code here!
+   # Remember: the last expression evaluated will be returned! 
+   if (func == sum()){
+     ev = sum(dat)
+   }
+   if (func == "median"){
+     ev = median(dat)
+   }
+   
+   ev = func()
+ }
>   ev = func(dat)
Error in func(dat) : could not find function "func"
> evaluate <- function(func, dat){
+   # Write your code here!
+   # Remember: the last expression evaluated will be returned! 
+   if (func == sum()){
+     ev = sum(dat)
+   }
+   if (func == "median"){
+     ev = median(dat)
+   }
+ }
> evaluate(sum, c(2,4,6))
Error in func == sum() : 
  comparison (1) is possible only for atomic and list types
> evaluate <- function(func, dat){
+   # Write your code here!
+   # Remember: the last expression evaluated will be returned! 
+   if (func == sum()){
+     ev = sum(dat)
+   }
+   if (func == "median"){
+     ev = median(dat)
+   }
+   ?func
+   ev
+ }
> evaluate(sum, c(2,4,6))
Error in func == sum() : 
  comparison (1) is possible only for atomic and list types
> evaluate <- function(func, dat){
+   # Write your code here!
+   # Remember: the last expression evaluated will be returned! 
+   if (func == sum()){
+     ev = sum(dat)
+   }
+   if (func == "median"){
+     ev = median(dat)
+   }
+   
+   myfun <- func();
+   ev
+ }
> evaluate(sum, c(2,4,6))
Error in func == sum() : 
  comparison (1) is possible only for atomic and list types
> evaluate <- function(func, dat){
+   # Write your code here!
+   # Remember: the last expression evaluated will be returned! 
+ 
+   
+   myfun <- func();
+   ev
+ }
> evaluate(sum, c(2,4,6))
Error in evaluate(sum, c(2, 4, 6)) : object 'ev' not found
> evaluate <- function(func, dat){
+   # Write your code here!
+   # Remember: the last expression evaluated will be returned! 
+ 
+   
+   myfun <- func();
+   
+ }
> evaluate(sum, c(2,4,6))
> evaluate <- function(func, dat){
+   # Write your code here!
+   # Remember: the last expression evaluated will be returned! 
+ 
+   
+   myfun <- func();
+   ev = myfun(dat)
+   ev
+ }
> evaluate(sum, c(2,4,6))
Error in myfun(dat) : could not find function "myfun"
> 